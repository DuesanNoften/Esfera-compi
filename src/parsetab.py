
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME INTEGER BOOL COMMENT ALTER DEF PROC TYPEstatement : PROC NAME "(" expression ")"statement : COMMENT statement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INTEGERexpression : BOOLexpression : NAMEexpression : DEF "(" NAME "," TYPE "," INTEGER ")"\n                  | DEF "(" NAME "," TYPE "," BOOL ")"\n                  | DEF "(" NAME "," TYPE ")"expression : NAME "(" expression ")"expression : ALTER "(" NAME "," expression ")"'
    
_lr_action_items = {'PROC':([0,],[2,]),'COMMENT':([0,],[6,]),'-':([0,3,4,5,7,8,9,13,14,15,16,17,18,19,22,23,24,25,26,27,28,31,32,34,37,39,40,43,44,],[7,-12,7,16,7,-10,-11,7,16,7,7,7,7,-8,7,16,-9,-4,-5,-6,-7,16,-16,7,16,-15,-17,-13,-14,]),'(':([0,3,4,7,10,11,12,13,15,16,17,18,22,34,],[4,13,4,4,20,21,22,4,4,4,4,4,4,4,]),'INTEGER':([0,4,7,13,15,16,17,18,22,34,38,],[8,8,8,8,8,8,8,8,8,8,41,]),'BOOL':([0,4,7,13,15,16,17,18,22,34,38,],[9,9,9,9,9,9,9,9,9,9,42,]),'NAME':([0,2,4,7,13,15,16,17,18,20,21,22,34,],[3,12,3,3,3,3,3,3,3,29,30,3,3,]),'DEF':([0,4,7,13,15,16,17,18,22,34,],[10,10,10,10,10,10,10,10,10,10,]),'ALTER':([0,4,7,13,15,16,17,18,22,34,],[11,11,11,11,11,11,11,11,11,11,]),'$end':([1,3,5,6,8,9,19,24,25,26,27,28,32,35,39,40,43,44,],[0,-12,-3,-2,-10,-11,-8,-9,-4,-5,-6,-7,-16,-1,-15,-17,-13,-14,]),'+':([3,5,8,9,14,19,23,24,25,26,27,28,31,32,37,39,40,43,44,],[-12,15,-10,-11,15,-8,15,-9,-4,-5,-6,-7,15,-16,15,-15,-17,-13,-14,]),'*':([3,5,8,9,14,19,23,24,25,26,27,28,31,32,37,39,40,43,44,],[-12,17,-10,-11,17,-8,17,-9,17,17,-6,-7,17,-16,17,-15,-17,-13,-14,]),'/':([3,5,8,9,14,19,23,24,25,26,27,28,31,32,37,39,40,43,44,],[-12,18,-10,-11,18,-8,18,-9,18,18,-6,-7,18,-16,18,-15,-17,-13,-14,]),')':([3,8,9,14,19,23,24,25,26,27,28,31,32,36,37,39,40,41,42,43,44,],[-12,-10,-11,24,-8,32,-9,-4,-5,-6,-7,35,-16,39,40,-15,-17,43,44,-13,-14,]),',':([29,30,36,],[33,34,38,]),'TYPE':([33,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,7,13,15,16,17,18,22,34,],[5,14,19,23,25,26,27,28,31,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PROC NAME ( expression )','statement',5,'p_statement_proc','Compilador.py',66),
  ('statement -> COMMENT','statement',1,'p_statement_comment','Compilador.py',73),
  ('statement -> expression','statement',1,'p_statement_expr','Compilador.py',77),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Compilador.py',82),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Compilador.py',83),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Compilador.py',84),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Compilador.py',85),
  ('expression -> - expression','expression',2,'p_expression_uminus','Compilador.py',97),
  ('expression -> ( expression )','expression',3,'p_expression_group','Compilador.py',102),
  ('expression -> INTEGER','expression',1,'p_expression_integer','Compilador.py',107),
  ('expression -> BOOL','expression',1,'p_expression_bool','Compilador.py',111),
  ('expression -> NAME','expression',1,'p_expression_name','Compilador.py',116),
  ('expression -> DEF ( NAME , TYPE , INTEGER )','expression',8,'p_expression_def','Compilador.py',124),
  ('expression -> DEF ( NAME , TYPE , BOOL )','expression',8,'p_expression_def','Compilador.py',125),
  ('expression -> DEF ( NAME , TYPE )','expression',6,'p_expression_def','Compilador.py',126),
  ('expression -> NAME ( expression )','expression',4,'p_expression_change','Compilador.py',144),
  ('expression -> ALTER ( NAME , expression )','expression',6,'p_expression_math','Compilador.py',152),
]
