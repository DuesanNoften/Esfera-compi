
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME INTEGER BOOL COMMENT ALTER DEF PROCstatement : DEF "(" NAME "," expression ")"statement : ALTER "(" NAME "," expression ")"statement : NAME "(" statement ")"statement : PROC NAME "(" expression ")"statement : COMMENT statement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INTEGERexpression : BOOLexpression : NAME'
    
_lr_action_items = {'DEF':([0,15,],[2,2,]),'ALTER':([0,15,],[6,6,]),'NAME':([0,3,7,9,12,15,16,17,18,19,20,31,32,34,],[4,14,21,14,23,4,14,14,14,14,30,14,14,14,]),'PROC':([0,15,],[7,7,]),'COMMENT':([0,15,],[8,8,]),'-':([0,3,4,5,9,10,11,13,14,15,16,17,18,19,22,24,26,27,28,29,31,32,34,35,36,37,],[9,9,-15,17,9,-13,-14,17,-15,9,9,9,9,9,-11,-12,-7,-8,-9,-10,9,9,9,17,17,17,]),'(':([0,2,3,4,6,9,15,16,17,18,19,21,31,32,34,],[3,12,3,15,20,3,3,3,3,3,3,31,3,3,3,]),'INTEGER':([0,3,9,15,16,17,18,19,31,32,34,],[10,10,10,10,10,10,10,10,10,10,10,]),'BOOL':([0,3,9,15,16,17,18,19,31,32,34,],[11,11,11,11,11,11,11,11,11,11,11,]),'$end':([1,4,5,8,10,11,14,22,24,26,27,28,29,33,38,39,40,],[0,-15,-6,-5,-13,-14,-15,-11,-12,-7,-8,-9,-10,-3,-4,-1,-2,]),'+':([4,5,10,11,13,14,22,24,26,27,28,29,35,36,37,],[-15,16,-13,-14,16,-15,-11,-12,-7,-8,-9,-10,16,16,16,]),'*':([4,5,10,11,13,14,22,24,26,27,28,29,35,36,37,],[-15,18,-13,-14,18,-15,-11,-12,18,18,-9,-10,18,18,18,]),'/':([4,5,10,11,13,14,22,24,26,27,28,29,35,36,37,],[-15,19,-13,-14,19,-15,-11,-12,19,19,-9,-10,19,19,19,]),')':([4,5,8,10,11,13,14,22,24,25,26,27,28,29,33,35,36,37,38,39,40,],[-15,-6,-5,-13,-14,24,-15,-11,-12,33,-7,-8,-9,-10,-3,38,39,40,-4,-1,-2,]),',':([23,30,],[32,34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,15,],[1,25,]),'expression':([0,3,9,15,16,17,18,19,31,32,34,],[5,13,22,5,26,27,28,29,35,36,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> DEF ( NAME , expression )','statement',6,'p_statement_assign','Compilador.py',64),
  ('statement -> ALTER ( NAME , expression )','statement',6,'p_statement_math','Compilador.py',71),
  ('statement -> NAME ( statement )','statement',4,'p_statement_change','Compilador.py',81),
  ('statement -> PROC NAME ( expression )','statement',5,'p_statement_proc','Compilador.py',85),
  ('statement -> COMMENT','statement',1,'p_statement_comment','Compilador.py',92),
  ('statement -> expression','statement',1,'p_statement_expr','Compilador.py',96),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Compilador.py',101),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Compilador.py',102),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Compilador.py',103),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Compilador.py',104),
  ('expression -> - expression','expression',2,'p_expression_uminus','Compilador.py',116),
  ('expression -> ( expression )','expression',3,'p_expression_group','Compilador.py',121),
  ('expression -> INTEGER','expression',1,'p_expression_integer','Compilador.py',126),
  ('expression -> BOOL','expression',1,'p_expression_bool','Compilador.py',130),
  ('expression -> NAME','expression',1,'p_expression_name','Compilador.py',135),
]
