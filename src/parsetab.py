
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME NUMBER BOOL COMMENT PROC DEFstatement : DEF "(" NAME "," expression ")"statement : COMMENT statement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBERexpression : BOOLexpression : NAME'
    
_lr_action_items = {'DEF':([0,],[2,]),'COMMENT':([0,],[6,]),'-':([0,3,4,5,7,8,9,11,12,13,14,15,16,18,19,20,21,22,23,24,],[7,7,-12,13,7,-10,-11,13,7,7,7,7,-8,-9,-4,-5,-6,-7,7,13,]),'(':([0,2,3,7,12,13,14,15,23,],[3,10,3,3,3,3,3,3,3,]),'NUMBER':([0,3,7,12,13,14,15,23,],[8,8,8,8,8,8,8,8,]),'BOOL':([0,3,7,12,13,14,15,23,],[9,9,9,9,9,9,9,9,]),'NAME':([0,3,7,10,12,13,14,15,23,],[4,4,4,17,4,4,4,4,4,]),'$end':([1,4,5,6,8,9,16,18,19,20,21,22,25,],[0,-12,-3,-2,-10,-11,-8,-9,-4,-5,-6,-7,-1,]),'+':([4,5,8,9,11,16,18,19,20,21,22,24,],[-12,12,-10,-11,12,-8,-9,-4,-5,-6,-7,12,]),'*':([4,5,8,9,11,16,18,19,20,21,22,24,],[-12,14,-10,-11,14,-8,-9,14,14,-6,-7,14,]),'/':([4,5,8,9,11,16,18,19,20,21,22,24,],[-12,15,-10,-11,15,-8,-9,15,15,-6,-7,15,]),')':([4,8,9,11,16,18,19,20,21,22,24,],[-12,-10,-11,18,-8,-9,-4,-5,-6,-7,25,]),',':([17,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,3,7,12,13,14,15,23,],[5,11,16,19,20,21,22,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> DEF ( NAME , expression )','statement',6,'p_statement_assign','Compilador.py',65),
  ('statement -> COMMENT','statement',1,'p_statement_comment','Compilador.py',79),
  ('statement -> expression','statement',1,'p_statement_expr','Compilador.py',83),
  ('expression -> expression + expression','expression',3,'p_expression_binop','Compilador.py',88),
  ('expression -> expression - expression','expression',3,'p_expression_binop','Compilador.py',89),
  ('expression -> expression * expression','expression',3,'p_expression_binop','Compilador.py',90),
  ('expression -> expression / expression','expression',3,'p_expression_binop','Compilador.py',91),
  ('expression -> - expression','expression',2,'p_expression_uminus','Compilador.py',103),
  ('expression -> ( expression )','expression',3,'p_expression_group','Compilador.py',108),
  ('expression -> NUMBER','expression',1,'p_expression_number','Compilador.py',113),
  ('expression -> BOOL','expression',1,'p_expression_bool','Compilador.py',117),
  ('expression -> NAME','expression',1,'p_expression_name','Compilador.py',122),
]
