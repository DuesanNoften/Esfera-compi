Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> DEF ( NAME , expression )
Rule 2     statement -> ALTER ( NAME , expression )
Rule 3     statement -> NAME ( statement )
Rule 4     statement -> PROC NAME ( expression )
Rule 5     statement -> COMMENT
Rule 6     statement -> expression
Rule 7     expression -> expression + expression
Rule 8     expression -> expression - expression
Rule 9     expression -> expression * expression
Rule 10    expression -> expression / expression
Rule 11    expression -> - expression
Rule 12    expression -> ( expression )
Rule 13    expression -> INTEGER
Rule 14    expression -> BOOL
Rule 15    expression -> NAME

Terminals, with rules where they appear

(                    : 1 2 3 4 12
)                    : 1 2 3 4 12
*                    : 9
+                    : 7
,                    : 1 2
-                    : 8 11
/                    : 10
ALTER                : 2
BOOL                 : 14
COMMENT              : 5
DEF                  : 1
INTEGER              : 13
NAME                 : 1 2 3 4 15
PROC                 : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 4 6 7 7 8 8 9 9 10 10 11 12
statement            : 3 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . DEF ( NAME , expression )
    (2) statement -> . ALTER ( NAME , expression )
    (3) statement -> . NAME ( statement )
    (4) statement -> . PROC NAME ( expression )
    (5) statement -> . COMMENT
    (6) statement -> . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    DEF             shift and go to state 2
    ALTER           shift and go to state 6
    NAME            shift and go to state 4
    PROC            shift and go to state 7
    COMMENT         shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11

    statement                      shift and go to state 1
    expression                     shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> DEF . ( NAME , expression )

    (               shift and go to state 12


state 3

    (12) expression -> ( . expression )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 13

state 4

    (3) statement -> NAME . ( statement )
    (15) expression -> NAME .

    (               shift and go to state 15
    +               reduce using rule 15 (expression -> NAME .)
    -               reduce using rule 15 (expression -> NAME .)
    *               reduce using rule 15 (expression -> NAME .)
    /               reduce using rule 15 (expression -> NAME .)
    $end            reduce using rule 15 (expression -> NAME .)
    )               reduce using rule 15 (expression -> NAME .)


state 5

    (6) statement -> expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    $end            reduce using rule 6 (statement -> expression .)
    )               reduce using rule 6 (statement -> expression .)
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 6

    (2) statement -> ALTER . ( NAME , expression )

    (               shift and go to state 20


state 7

    (4) statement -> PROC . NAME ( expression )

    NAME            shift and go to state 21


state 8

    (5) statement -> COMMENT .

    $end            reduce using rule 5 (statement -> COMMENT .)
    )               reduce using rule 5 (statement -> COMMENT .)


state 9

    (11) expression -> - . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 22

state 10

    (13) expression -> INTEGER .

    +               reduce using rule 13 (expression -> INTEGER .)
    -               reduce using rule 13 (expression -> INTEGER .)
    *               reduce using rule 13 (expression -> INTEGER .)
    /               reduce using rule 13 (expression -> INTEGER .)
    $end            reduce using rule 13 (expression -> INTEGER .)
    )               reduce using rule 13 (expression -> INTEGER .)


state 11

    (14) expression -> BOOL .

    +               reduce using rule 14 (expression -> BOOL .)
    -               reduce using rule 14 (expression -> BOOL .)
    *               reduce using rule 14 (expression -> BOOL .)
    /               reduce using rule 14 (expression -> BOOL .)
    $end            reduce using rule 14 (expression -> BOOL .)
    )               reduce using rule 14 (expression -> BOOL .)


state 12

    (1) statement -> DEF ( . NAME , expression )

    NAME            shift and go to state 23


state 13

    (12) expression -> ( expression . )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    )               shift and go to state 24
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 14

    (15) expression -> NAME .

    )               reduce using rule 15 (expression -> NAME .)
    +               reduce using rule 15 (expression -> NAME .)
    -               reduce using rule 15 (expression -> NAME .)
    *               reduce using rule 15 (expression -> NAME .)
    /               reduce using rule 15 (expression -> NAME .)
    $end            reduce using rule 15 (expression -> NAME .)


state 15

    (3) statement -> NAME ( . statement )
    (1) statement -> . DEF ( NAME , expression )
    (2) statement -> . ALTER ( NAME , expression )
    (3) statement -> . NAME ( statement )
    (4) statement -> . PROC NAME ( expression )
    (5) statement -> . COMMENT
    (6) statement -> . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    DEF             shift and go to state 2
    ALTER           shift and go to state 6
    NAME            shift and go to state 4
    PROC            shift and go to state 7
    COMMENT         shift and go to state 8
    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11

    statement                      shift and go to state 25
    expression                     shift and go to state 5

state 16

    (7) expression -> expression + . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 26

state 17

    (8) expression -> expression - . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 27

state 18

    (9) expression -> expression * . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 28

state 19

    (10) expression -> expression / . expression
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 29

state 20

    (2) statement -> ALTER ( . NAME , expression )

    NAME            shift and go to state 30


state 21

    (4) statement -> PROC NAME . ( expression )

    (               shift and go to state 31


state 22

    (11) expression -> - expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    +               reduce using rule 11 (expression -> - expression .)
    -               reduce using rule 11 (expression -> - expression .)
    *               reduce using rule 11 (expression -> - expression .)
    /               reduce using rule 11 (expression -> - expression .)
    $end            reduce using rule 11 (expression -> - expression .)
    )               reduce using rule 11 (expression -> - expression .)

  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 19 ]


state 23

    (1) statement -> DEF ( NAME . , expression )

    ,               shift and go to state 32


state 24

    (12) expression -> ( expression ) .

    +               reduce using rule 12 (expression -> ( expression ) .)
    -               reduce using rule 12 (expression -> ( expression ) .)
    *               reduce using rule 12 (expression -> ( expression ) .)
    /               reduce using rule 12 (expression -> ( expression ) .)
    $end            reduce using rule 12 (expression -> ( expression ) .)
    )               reduce using rule 12 (expression -> ( expression ) .)


state 25

    (3) statement -> NAME ( statement . )

    )               shift and go to state 33


state 26

    (7) expression -> expression + expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    +               reduce using rule 7 (expression -> expression + expression .)
    -               reduce using rule 7 (expression -> expression + expression .)
    $end            reduce using rule 7 (expression -> expression + expression .)
    )               reduce using rule 7 (expression -> expression + expression .)
    *               shift and go to state 18
    /               shift and go to state 19

  ! *               [ reduce using rule 7 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]


state 27

    (8) expression -> expression - expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    +               reduce using rule 8 (expression -> expression - expression .)
    -               reduce using rule 8 (expression -> expression - expression .)
    $end            reduce using rule 8 (expression -> expression - expression .)
    )               reduce using rule 8 (expression -> expression - expression .)
    *               shift and go to state 18
    /               shift and go to state 19

  ! *               [ reduce using rule 8 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]


state 28

    (9) expression -> expression * expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    +               reduce using rule 9 (expression -> expression * expression .)
    -               reduce using rule 9 (expression -> expression * expression .)
    *               reduce using rule 9 (expression -> expression * expression .)
    /               reduce using rule 9 (expression -> expression * expression .)
    $end            reduce using rule 9 (expression -> expression * expression .)
    )               reduce using rule 9 (expression -> expression * expression .)

  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 19 ]


state 29

    (10) expression -> expression / expression .
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    +               reduce using rule 10 (expression -> expression / expression .)
    -               reduce using rule 10 (expression -> expression / expression .)
    *               reduce using rule 10 (expression -> expression / expression .)
    /               reduce using rule 10 (expression -> expression / expression .)
    $end            reduce using rule 10 (expression -> expression / expression .)
    )               reduce using rule 10 (expression -> expression / expression .)

  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 19 ]


state 30

    (2) statement -> ALTER ( NAME . , expression )

    ,               shift and go to state 34


state 31

    (4) statement -> PROC NAME ( . expression )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 35

state 32

    (1) statement -> DEF ( NAME , . expression )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 36

state 33

    (3) statement -> NAME ( statement ) .

    $end            reduce using rule 3 (statement -> NAME ( statement ) .)
    )               reduce using rule 3 (statement -> NAME ( statement ) .)


state 34

    (2) statement -> ALTER ( NAME , . expression )
    (7) expression -> . expression + expression
    (8) expression -> . expression - expression
    (9) expression -> . expression * expression
    (10) expression -> . expression / expression
    (11) expression -> . - expression
    (12) expression -> . ( expression )
    (13) expression -> . INTEGER
    (14) expression -> . BOOL
    (15) expression -> . NAME

    -               shift and go to state 9
    (               shift and go to state 3
    INTEGER         shift and go to state 10
    BOOL            shift and go to state 11
    NAME            shift and go to state 14

    expression                     shift and go to state 37

state 35

    (4) statement -> PROC NAME ( expression . )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    )               shift and go to state 38
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 36

    (1) statement -> DEF ( NAME , expression . )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    )               shift and go to state 39
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 37

    (2) statement -> ALTER ( NAME , expression . )
    (7) expression -> expression . + expression
    (8) expression -> expression . - expression
    (9) expression -> expression . * expression
    (10) expression -> expression . / expression

    )               shift and go to state 40
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 38

    (4) statement -> PROC NAME ( expression ) .

    $end            reduce using rule 4 (statement -> PROC NAME ( expression ) .)
    )               reduce using rule 4 (statement -> PROC NAME ( expression ) .)


state 39

    (1) statement -> DEF ( NAME , expression ) .

    $end            reduce using rule 1 (statement -> DEF ( NAME , expression ) .)
    )               reduce using rule 1 (statement -> DEF ( NAME , expression ) .)


state 40

    (2) statement -> ALTER ( NAME , expression ) .

    $end            reduce using rule 2 (statement -> ALTER ( NAME , expression ) .)
    )               reduce using rule 2 (statement -> ALTER ( NAME , expression ) .)

