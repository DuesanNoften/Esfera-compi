Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PROC NAME ( expression )
Rule 2     statement -> COMMENT
Rule 3     statement -> expression
Rule 4     expression -> expression + expression
Rule 5     expression -> expression - expression
Rule 6     expression -> expression * expression
Rule 7     expression -> expression / expression
Rule 8     expression -> - expression
Rule 9     expression -> ( expression )
Rule 10    expression -> INTEGER
Rule 11    expression -> BOOL
Rule 12    expression -> NAME
Rule 13    expression -> DEF ( NAME , TYPE , INTEGER )
Rule 14    expression -> DEF ( NAME , TYPE , BOOL )
Rule 15    expression -> DEF ( NAME , TYPE )
Rule 16    expression -> NAME ( expression )
Rule 17    expression -> ALTER ( NAME , expression )
Rule 18    expression -> NOT ( NAME )

Terminals, with rules where they appear

(                    : 1 9 13 14 15 16 17 18
)                    : 1 9 13 14 15 16 17 18
*                    : 6
+                    : 4
,                    : 13 13 14 14 15 17
-                    : 5 8
/                    : 7
ALTER                : 17
BOOL                 : 11 14
COMMENT              : 2
DEF                  : 13 14 15
INTEGER              : 10 13
NAME                 : 1 12 13 14 15 16 17 18
NOT                  : 18
PROC                 : 1
TYPE                 : 13 14 15
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 4 4 5 5 6 6 7 7 8 9 16 17
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PROC NAME ( expression )
    (2) statement -> . COMMENT
    (3) statement -> . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    PROC            shift and go to state 2
    COMMENT         shift and go to state 6
    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    statement                      shift and go to state 1
    expression                     shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PROC . NAME ( expression )

    NAME            shift and go to state 13


state 3

    (12) expression -> NAME .
    (16) expression -> NAME . ( expression )

    +               reduce using rule 12 (expression -> NAME .)
    -               reduce using rule 12 (expression -> NAME .)
    *               reduce using rule 12 (expression -> NAME .)
    /               reduce using rule 12 (expression -> NAME .)
    $end            reduce using rule 12 (expression -> NAME .)
    )               reduce using rule 12 (expression -> NAME .)
    (               shift and go to state 14


state 4

    (9) expression -> ( . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 15

state 5

    (3) statement -> expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    $end            reduce using rule 3 (statement -> expression .)
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 6

    (2) statement -> COMMENT .

    $end            reduce using rule 2 (statement -> COMMENT .)


state 7

    (8) expression -> - . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 20

state 8

    (10) expression -> INTEGER .

    +               reduce using rule 10 (expression -> INTEGER .)
    -               reduce using rule 10 (expression -> INTEGER .)
    *               reduce using rule 10 (expression -> INTEGER .)
    /               reduce using rule 10 (expression -> INTEGER .)
    $end            reduce using rule 10 (expression -> INTEGER .)
    )               reduce using rule 10 (expression -> INTEGER .)


state 9

    (11) expression -> BOOL .

    +               reduce using rule 11 (expression -> BOOL .)
    -               reduce using rule 11 (expression -> BOOL .)
    *               reduce using rule 11 (expression -> BOOL .)
    /               reduce using rule 11 (expression -> BOOL .)
    $end            reduce using rule 11 (expression -> BOOL .)
    )               reduce using rule 11 (expression -> BOOL .)


state 10

    (13) expression -> DEF . ( NAME , TYPE , INTEGER )
    (14) expression -> DEF . ( NAME , TYPE , BOOL )
    (15) expression -> DEF . ( NAME , TYPE )

    (               shift and go to state 21


state 11

    (17) expression -> ALTER . ( NAME , expression )

    (               shift and go to state 22


state 12

    (18) expression -> NOT . ( NAME )

    (               shift and go to state 23


state 13

    (1) statement -> PROC NAME . ( expression )

    (               shift and go to state 24


state 14

    (16) expression -> NAME ( . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 25

state 15

    (9) expression -> ( expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 26
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 16

    (4) expression -> expression + . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 27

state 17

    (5) expression -> expression - . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 28

state 18

    (6) expression -> expression * . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 29

state 19

    (7) expression -> expression / . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 30

state 20

    (8) expression -> - expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 8 (expression -> - expression .)
    -               reduce using rule 8 (expression -> - expression .)
    *               reduce using rule 8 (expression -> - expression .)
    /               reduce using rule 8 (expression -> - expression .)
    $end            reduce using rule 8 (expression -> - expression .)
    )               reduce using rule 8 (expression -> - expression .)

  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 19 ]


state 21

    (13) expression -> DEF ( . NAME , TYPE , INTEGER )
    (14) expression -> DEF ( . NAME , TYPE , BOOL )
    (15) expression -> DEF ( . NAME , TYPE )

    NAME            shift and go to state 31


state 22

    (17) expression -> ALTER ( . NAME , expression )

    NAME            shift and go to state 32


state 23

    (18) expression -> NOT ( . NAME )

    NAME            shift and go to state 33


state 24

    (1) statement -> PROC NAME ( . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 34

state 25

    (16) expression -> NAME ( expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 35
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 26

    (9) expression -> ( expression ) .

    +               reduce using rule 9 (expression -> ( expression ) .)
    -               reduce using rule 9 (expression -> ( expression ) .)
    *               reduce using rule 9 (expression -> ( expression ) .)
    /               reduce using rule 9 (expression -> ( expression ) .)
    $end            reduce using rule 9 (expression -> ( expression ) .)
    )               reduce using rule 9 (expression -> ( expression ) .)


state 27

    (4) expression -> expression + expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 4 (expression -> expression + expression .)
    -               reduce using rule 4 (expression -> expression + expression .)
    $end            reduce using rule 4 (expression -> expression + expression .)
    )               reduce using rule 4 (expression -> expression + expression .)
    *               shift and go to state 18
    /               shift and go to state 19

  ! *               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]


state 28

    (5) expression -> expression - expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 5 (expression -> expression - expression .)
    -               reduce using rule 5 (expression -> expression - expression .)
    $end            reduce using rule 5 (expression -> expression - expression .)
    )               reduce using rule 5 (expression -> expression - expression .)
    *               shift and go to state 18
    /               shift and go to state 19

  ! *               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]


state 29

    (6) expression -> expression * expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 6 (expression -> expression * expression .)
    -               reduce using rule 6 (expression -> expression * expression .)
    *               reduce using rule 6 (expression -> expression * expression .)
    /               reduce using rule 6 (expression -> expression * expression .)
    $end            reduce using rule 6 (expression -> expression * expression .)
    )               reduce using rule 6 (expression -> expression * expression .)

  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 19 ]


state 30

    (7) expression -> expression / expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 7 (expression -> expression / expression .)
    -               reduce using rule 7 (expression -> expression / expression .)
    *               reduce using rule 7 (expression -> expression / expression .)
    /               reduce using rule 7 (expression -> expression / expression .)
    $end            reduce using rule 7 (expression -> expression / expression .)
    )               reduce using rule 7 (expression -> expression / expression .)

  ! +               [ shift and go to state 16 ]
  ! -               [ shift and go to state 17 ]
  ! *               [ shift and go to state 18 ]
  ! /               [ shift and go to state 19 ]


state 31

    (13) expression -> DEF ( NAME . , TYPE , INTEGER )
    (14) expression -> DEF ( NAME . , TYPE , BOOL )
    (15) expression -> DEF ( NAME . , TYPE )

    ,               shift and go to state 36


state 32

    (17) expression -> ALTER ( NAME . , expression )

    ,               shift and go to state 37


state 33

    (18) expression -> NOT ( NAME . )

    )               shift and go to state 38


state 34

    (1) statement -> PROC NAME ( expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 39
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 35

    (16) expression -> NAME ( expression ) .

    +               reduce using rule 16 (expression -> NAME ( expression ) .)
    -               reduce using rule 16 (expression -> NAME ( expression ) .)
    *               reduce using rule 16 (expression -> NAME ( expression ) .)
    /               reduce using rule 16 (expression -> NAME ( expression ) .)
    $end            reduce using rule 16 (expression -> NAME ( expression ) .)
    )               reduce using rule 16 (expression -> NAME ( expression ) .)


state 36

    (13) expression -> DEF ( NAME , . TYPE , INTEGER )
    (14) expression -> DEF ( NAME , . TYPE , BOOL )
    (15) expression -> DEF ( NAME , . TYPE )

    TYPE            shift and go to state 40


state 37

    (17) expression -> ALTER ( NAME , . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , TYPE , INTEGER )
    (14) expression -> . DEF ( NAME , TYPE , BOOL )
    (15) expression -> . DEF ( NAME , TYPE )
    (16) expression -> . NAME ( expression )
    (17) expression -> . ALTER ( NAME , expression )
    (18) expression -> . NOT ( NAME )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11
    NOT             shift and go to state 12

    expression                     shift and go to state 41

state 38

    (18) expression -> NOT ( NAME ) .

    +               reduce using rule 18 (expression -> NOT ( NAME ) .)
    -               reduce using rule 18 (expression -> NOT ( NAME ) .)
    *               reduce using rule 18 (expression -> NOT ( NAME ) .)
    /               reduce using rule 18 (expression -> NOT ( NAME ) .)
    $end            reduce using rule 18 (expression -> NOT ( NAME ) .)
    )               reduce using rule 18 (expression -> NOT ( NAME ) .)


state 39

    (1) statement -> PROC NAME ( expression ) .

    $end            reduce using rule 1 (statement -> PROC NAME ( expression ) .)


state 40

    (13) expression -> DEF ( NAME , TYPE . , INTEGER )
    (14) expression -> DEF ( NAME , TYPE . , BOOL )
    (15) expression -> DEF ( NAME , TYPE . )

    ,               shift and go to state 42
    )               shift and go to state 43


state 41

    (17) expression -> ALTER ( NAME , expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 44
    +               shift and go to state 16
    -               shift and go to state 17
    *               shift and go to state 18
    /               shift and go to state 19


state 42

    (13) expression -> DEF ( NAME , TYPE , . INTEGER )
    (14) expression -> DEF ( NAME , TYPE , . BOOL )

    INTEGER         shift and go to state 45
    BOOL            shift and go to state 46


state 43

    (15) expression -> DEF ( NAME , TYPE ) .

    +               reduce using rule 15 (expression -> DEF ( NAME , TYPE ) .)
    -               reduce using rule 15 (expression -> DEF ( NAME , TYPE ) .)
    *               reduce using rule 15 (expression -> DEF ( NAME , TYPE ) .)
    /               reduce using rule 15 (expression -> DEF ( NAME , TYPE ) .)
    $end            reduce using rule 15 (expression -> DEF ( NAME , TYPE ) .)
    )               reduce using rule 15 (expression -> DEF ( NAME , TYPE ) .)


state 44

    (17) expression -> ALTER ( NAME , expression ) .

    +               reduce using rule 17 (expression -> ALTER ( NAME , expression ) .)
    -               reduce using rule 17 (expression -> ALTER ( NAME , expression ) .)
    *               reduce using rule 17 (expression -> ALTER ( NAME , expression ) .)
    /               reduce using rule 17 (expression -> ALTER ( NAME , expression ) .)
    $end            reduce using rule 17 (expression -> ALTER ( NAME , expression ) .)
    )               reduce using rule 17 (expression -> ALTER ( NAME , expression ) .)


state 45

    (13) expression -> DEF ( NAME , TYPE , INTEGER . )

    )               shift and go to state 47


state 46

    (14) expression -> DEF ( NAME , TYPE , BOOL . )

    )               shift and go to state 48


state 47

    (13) expression -> DEF ( NAME , TYPE , INTEGER ) .

    +               reduce using rule 13 (expression -> DEF ( NAME , TYPE , INTEGER ) .)
    -               reduce using rule 13 (expression -> DEF ( NAME , TYPE , INTEGER ) .)
    *               reduce using rule 13 (expression -> DEF ( NAME , TYPE , INTEGER ) .)
    /               reduce using rule 13 (expression -> DEF ( NAME , TYPE , INTEGER ) .)
    $end            reduce using rule 13 (expression -> DEF ( NAME , TYPE , INTEGER ) .)
    )               reduce using rule 13 (expression -> DEF ( NAME , TYPE , INTEGER ) .)


state 48

    (14) expression -> DEF ( NAME , TYPE , BOOL ) .

    +               reduce using rule 14 (expression -> DEF ( NAME , TYPE , BOOL ) .)
    -               reduce using rule 14 (expression -> DEF ( NAME , TYPE , BOOL ) .)
    *               reduce using rule 14 (expression -> DEF ( NAME , TYPE , BOOL ) .)
    /               reduce using rule 14 (expression -> DEF ( NAME , TYPE , BOOL ) .)
    $end            reduce using rule 14 (expression -> DEF ( NAME , TYPE , BOOL ) .)
    )               reduce using rule 14 (expression -> DEF ( NAME , TYPE , BOOL ) .)

