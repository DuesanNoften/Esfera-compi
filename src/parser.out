Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PROC NAME ( expression )
Rule 2     statement -> COMMENT
Rule 3     statement -> expression
Rule 4     expression -> expression + expression
Rule 5     expression -> expression - expression
Rule 6     expression -> expression * expression
Rule 7     expression -> expression / expression
Rule 8     expression -> - expression
Rule 9     expression -> ( expression )
Rule 10    expression -> INTEGER
Rule 11    expression -> BOOL
Rule 12    expression -> NAME
Rule 13    expression -> DEF ( NAME , expression )
Rule 14    expression -> NAME ( statement )
Rule 15    expression -> ALTER ( NAME , expression )

Terminals, with rules where they appear

(                    : 1 9 13 14 15
)                    : 1 9 13 14 15
*                    : 6
+                    : 4
,                    : 13 15
-                    : 5 8
/                    : 7
ALTER                : 15
BOOL                 : 11
COMMENT              : 2
DEF                  : 13
INTEGER              : 10
NAME                 : 1 12 13 14 15
PROC                 : 1
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 4 4 5 5 6 6 7 7 8 9 13 15
statement            : 14 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PROC NAME ( expression )
    (2) statement -> . COMMENT
    (3) statement -> . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    PROC            shift and go to state 2
    COMMENT         shift and go to state 6
    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    statement                      shift and go to state 1
    expression                     shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PROC . NAME ( expression )

    NAME            shift and go to state 12


state 3

    (12) expression -> NAME .
    (14) expression -> NAME . ( statement )

    +               reduce using rule 12 (expression -> NAME .)
    -               reduce using rule 12 (expression -> NAME .)
    *               reduce using rule 12 (expression -> NAME .)
    /               reduce using rule 12 (expression -> NAME .)
    $end            reduce using rule 12 (expression -> NAME .)
    )               reduce using rule 12 (expression -> NAME .)
    (               shift and go to state 13


state 4

    (9) expression -> ( . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 14

state 5

    (3) statement -> expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    $end            reduce using rule 3 (statement -> expression .)
    )               reduce using rule 3 (statement -> expression .)
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 6

    (2) statement -> COMMENT .

    $end            reduce using rule 2 (statement -> COMMENT .)
    )               reduce using rule 2 (statement -> COMMENT .)


state 7

    (8) expression -> - . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 19

state 8

    (10) expression -> INTEGER .

    +               reduce using rule 10 (expression -> INTEGER .)
    -               reduce using rule 10 (expression -> INTEGER .)
    *               reduce using rule 10 (expression -> INTEGER .)
    /               reduce using rule 10 (expression -> INTEGER .)
    $end            reduce using rule 10 (expression -> INTEGER .)
    )               reduce using rule 10 (expression -> INTEGER .)


state 9

    (11) expression -> BOOL .

    +               reduce using rule 11 (expression -> BOOL .)
    -               reduce using rule 11 (expression -> BOOL .)
    *               reduce using rule 11 (expression -> BOOL .)
    /               reduce using rule 11 (expression -> BOOL .)
    $end            reduce using rule 11 (expression -> BOOL .)
    )               reduce using rule 11 (expression -> BOOL .)


state 10

    (13) expression -> DEF . ( NAME , expression )

    (               shift and go to state 20


state 11

    (15) expression -> ALTER . ( NAME , expression )

    (               shift and go to state 21


state 12

    (1) statement -> PROC NAME . ( expression )

    (               shift and go to state 22


state 13

    (14) expression -> NAME ( . statement )
    (1) statement -> . PROC NAME ( expression )
    (2) statement -> . COMMENT
    (3) statement -> . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    PROC            shift and go to state 2
    COMMENT         shift and go to state 6
    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    statement                      shift and go to state 23
    expression                     shift and go to state 5

state 14

    (9) expression -> ( expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 24
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 15

    (4) expression -> expression + . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 25

state 16

    (5) expression -> expression - . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 26

state 17

    (6) expression -> expression * . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 27

state 18

    (7) expression -> expression / . expression
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 28

state 19

    (8) expression -> - expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 8 (expression -> - expression .)
    -               reduce using rule 8 (expression -> - expression .)
    *               reduce using rule 8 (expression -> - expression .)
    /               reduce using rule 8 (expression -> - expression .)
    $end            reduce using rule 8 (expression -> - expression .)
    )               reduce using rule 8 (expression -> - expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]


state 20

    (13) expression -> DEF ( . NAME , expression )

    NAME            shift and go to state 29


state 21

    (15) expression -> ALTER ( . NAME , expression )

    NAME            shift and go to state 30


state 22

    (1) statement -> PROC NAME ( . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 31

state 23

    (14) expression -> NAME ( statement . )

    )               shift and go to state 32


state 24

    (9) expression -> ( expression ) .

    +               reduce using rule 9 (expression -> ( expression ) .)
    -               reduce using rule 9 (expression -> ( expression ) .)
    *               reduce using rule 9 (expression -> ( expression ) .)
    /               reduce using rule 9 (expression -> ( expression ) .)
    $end            reduce using rule 9 (expression -> ( expression ) .)
    )               reduce using rule 9 (expression -> ( expression ) .)


state 25

    (4) expression -> expression + expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 4 (expression -> expression + expression .)
    -               reduce using rule 4 (expression -> expression + expression .)
    $end            reduce using rule 4 (expression -> expression + expression .)
    )               reduce using rule 4 (expression -> expression + expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]


state 26

    (5) expression -> expression - expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 5 (expression -> expression - expression .)
    -               reduce using rule 5 (expression -> expression - expression .)
    $end            reduce using rule 5 (expression -> expression - expression .)
    )               reduce using rule 5 (expression -> expression - expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]


state 27

    (6) expression -> expression * expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 6 (expression -> expression * expression .)
    -               reduce using rule 6 (expression -> expression * expression .)
    *               reduce using rule 6 (expression -> expression * expression .)
    /               reduce using rule 6 (expression -> expression * expression .)
    $end            reduce using rule 6 (expression -> expression * expression .)
    )               reduce using rule 6 (expression -> expression * expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]


state 28

    (7) expression -> expression / expression .
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    +               reduce using rule 7 (expression -> expression / expression .)
    -               reduce using rule 7 (expression -> expression / expression .)
    *               reduce using rule 7 (expression -> expression / expression .)
    /               reduce using rule 7 (expression -> expression / expression .)
    $end            reduce using rule 7 (expression -> expression / expression .)
    )               reduce using rule 7 (expression -> expression / expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]


state 29

    (13) expression -> DEF ( NAME . , expression )

    ,               shift and go to state 33


state 30

    (15) expression -> ALTER ( NAME . , expression )

    ,               shift and go to state 34


state 31

    (1) statement -> PROC NAME ( expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 35
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 32

    (14) expression -> NAME ( statement ) .

    +               reduce using rule 14 (expression -> NAME ( statement ) .)
    -               reduce using rule 14 (expression -> NAME ( statement ) .)
    *               reduce using rule 14 (expression -> NAME ( statement ) .)
    /               reduce using rule 14 (expression -> NAME ( statement ) .)
    $end            reduce using rule 14 (expression -> NAME ( statement ) .)
    )               reduce using rule 14 (expression -> NAME ( statement ) .)


state 33

    (13) expression -> DEF ( NAME , . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 36

state 34

    (15) expression -> ALTER ( NAME , . expression )
    (4) expression -> . expression + expression
    (5) expression -> . expression - expression
    (6) expression -> . expression * expression
    (7) expression -> . expression / expression
    (8) expression -> . - expression
    (9) expression -> . ( expression )
    (10) expression -> . INTEGER
    (11) expression -> . BOOL
    (12) expression -> . NAME
    (13) expression -> . DEF ( NAME , expression )
    (14) expression -> . NAME ( statement )
    (15) expression -> . ALTER ( NAME , expression )

    -               shift and go to state 7
    (               shift and go to state 4
    INTEGER         shift and go to state 8
    BOOL            shift and go to state 9
    NAME            shift and go to state 3
    DEF             shift and go to state 10
    ALTER           shift and go to state 11

    expression                     shift and go to state 37

state 35

    (1) statement -> PROC NAME ( expression ) .

    $end            reduce using rule 1 (statement -> PROC NAME ( expression ) .)
    )               reduce using rule 1 (statement -> PROC NAME ( expression ) .)


state 36

    (13) expression -> DEF ( NAME , expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 38
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 37

    (15) expression -> ALTER ( NAME , expression . )
    (4) expression -> expression . + expression
    (5) expression -> expression . - expression
    (6) expression -> expression . * expression
    (7) expression -> expression . / expression

    )               shift and go to state 39
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 38

    (13) expression -> DEF ( NAME , expression ) .

    +               reduce using rule 13 (expression -> DEF ( NAME , expression ) .)
    -               reduce using rule 13 (expression -> DEF ( NAME , expression ) .)
    *               reduce using rule 13 (expression -> DEF ( NAME , expression ) .)
    /               reduce using rule 13 (expression -> DEF ( NAME , expression ) .)
    $end            reduce using rule 13 (expression -> DEF ( NAME , expression ) .)
    )               reduce using rule 13 (expression -> DEF ( NAME , expression ) .)


state 39

    (15) expression -> ALTER ( NAME , expression ) .

    +               reduce using rule 15 (expression -> ALTER ( NAME , expression ) .)
    -               reduce using rule 15 (expression -> ALTER ( NAME , expression ) .)
    *               reduce using rule 15 (expression -> ALTER ( NAME , expression ) .)
    /               reduce using rule 15 (expression -> ALTER ( NAME , expression ) .)
    $end            reduce using rule 15 (expression -> ALTER ( NAME , expression ) .)
    )               reduce using rule 15 (expression -> ALTER ( NAME , expression ) .)

