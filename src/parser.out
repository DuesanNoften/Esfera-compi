Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    HORN

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PROC NAME ( expression )
Rule 2     statement -> COMMENT
Rule 3     statement -> PRINTLINE
Rule 4     statement -> expression
Rule 5     statement -> PRINT PRINTLINE
Rule 6     statement -> ALEATORIO LPAREN RPAREN
Rule 7     statement -> MOVER LPAREN MOVIMIENTO RPAREN
Rule 8     expression -> expression + expression
Rule 9     expression -> expression - expression
Rule 10    expression -> expression * expression
Rule 11    expression -> expression / expression
Rule 12    expression -> - expression
Rule 13    expression -> ( expression )
Rule 14    expression -> INTEGER
Rule 15    expression -> BOOL
Rule 16    expression -> NAME
Rule 17    expression -> DEF ( NAME , expression )
Rule 18    expression -> NAME ( expression )
Rule 19    expression -> ALTER ( NAME , expression )
Rule 20    expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

Terminals, with rules where they appear

(                    : 1 13 17 18 19
)                    : 1 13 17 18 19
*                    : 10
+                    : 8
,                    : 17 19
-                    : 9 12
/                    : 11
ALEATORIO            : 6
ALTER                : 19
BOOL                 : 15
BREAK                : 20
COMMENT              : 2
DEF                  : 17
HORN                 : 
INTEGER              : 14
LPAREN               : 6 7 20
MOVER                : 7
MOVIMIENTO           : 7
NAME                 : 1 16 17 18 19
PRINT                : 5
PRINTLINE            : 3 5
PROC                 : 1
REPEAT               : 20
RPAREN               : 6 7 20
SEMICOLON            : 20 20 20
error                : 

Nonterminals, with rules where they appear

expression           : 1 4 8 8 9 9 10 10 11 11 12 13 17 18 19 20
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PROC NAME ( expression )
    (2) statement -> . COMMENT
    (3) statement -> . PRINTLINE
    (4) statement -> . expression
    (5) statement -> . PRINT PRINTLINE
    (6) statement -> . ALEATORIO LPAREN RPAREN
    (7) statement -> . MOVER LPAREN MOVIMIENTO RPAREN
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    PROC            shift and go to state 2
    COMMENT         shift and go to state 6
    PRINTLINE       shift and go to state 7
    PRINT           shift and go to state 8
    ALEATORIO       shift and go to state 9
    MOVER           shift and go to state 10
    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    statement                      shift and go to state 1
    expression                     shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PROC . NAME ( expression )

    NAME            shift and go to state 17


state 3

    (16) expression -> NAME .
    (18) expression -> NAME . ( expression )

    +               reduce using rule 16 (expression -> NAME .)
    -               reduce using rule 16 (expression -> NAME .)
    *               reduce using rule 16 (expression -> NAME .)
    /               reduce using rule 16 (expression -> NAME .)
    $end            reduce using rule 16 (expression -> NAME .)
    )               reduce using rule 16 (expression -> NAME .)
    SEMICOLON       reduce using rule 16 (expression -> NAME .)
    (               shift and go to state 18


state 4

    (13) expression -> ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 19

state 5

    (4) statement -> expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    $end            reduce using rule 4 (statement -> expression .)
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 6

    (2) statement -> COMMENT .

    $end            reduce using rule 2 (statement -> COMMENT .)


state 7

    (3) statement -> PRINTLINE .

    $end            reduce using rule 3 (statement -> PRINTLINE .)


state 8

    (5) statement -> PRINT . PRINTLINE

    PRINTLINE       shift and go to state 24


state 9

    (6) statement -> ALEATORIO . LPAREN RPAREN

    LPAREN          shift and go to state 25


state 10

    (7) statement -> MOVER . LPAREN MOVIMIENTO RPAREN

    LPAREN          shift and go to state 26


state 11

    (12) expression -> - . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 27

state 12

    (14) expression -> INTEGER .

    +               reduce using rule 14 (expression -> INTEGER .)
    -               reduce using rule 14 (expression -> INTEGER .)
    *               reduce using rule 14 (expression -> INTEGER .)
    /               reduce using rule 14 (expression -> INTEGER .)
    $end            reduce using rule 14 (expression -> INTEGER .)
    )               reduce using rule 14 (expression -> INTEGER .)
    SEMICOLON       reduce using rule 14 (expression -> INTEGER .)


state 13

    (15) expression -> BOOL .

    +               reduce using rule 15 (expression -> BOOL .)
    -               reduce using rule 15 (expression -> BOOL .)
    *               reduce using rule 15 (expression -> BOOL .)
    /               reduce using rule 15 (expression -> BOOL .)
    $end            reduce using rule 15 (expression -> BOOL .)
    )               reduce using rule 15 (expression -> BOOL .)
    SEMICOLON       reduce using rule 15 (expression -> BOOL .)


state 14

    (17) expression -> DEF . ( NAME , expression )

    (               shift and go to state 28


state 15

    (19) expression -> ALTER . ( NAME , expression )

    (               shift and go to state 29


state 16

    (20) expression -> REPEAT . LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    LPAREN          shift and go to state 30


state 17

    (1) statement -> PROC NAME . ( expression )

    (               shift and go to state 31


state 18

    (18) expression -> NAME ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 32

state 19

    (13) expression -> ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    )               shift and go to state 33
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 20

    (8) expression -> expression + . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 34

state 21

    (9) expression -> expression - . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 35

state 22

    (10) expression -> expression * . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 36

state 23

    (11) expression -> expression / . expression
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 37

state 24

    (5) statement -> PRINT PRINTLINE .

    $end            reduce using rule 5 (statement -> PRINT PRINTLINE .)


state 25

    (6) statement -> ALEATORIO LPAREN . RPAREN

    RPAREN          shift and go to state 38


state 26

    (7) statement -> MOVER LPAREN . MOVIMIENTO RPAREN

    MOVIMIENTO      shift and go to state 39


state 27

    (12) expression -> - expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    +               reduce using rule 12 (expression -> - expression .)
    -               reduce using rule 12 (expression -> - expression .)
    *               reduce using rule 12 (expression -> - expression .)
    /               reduce using rule 12 (expression -> - expression .)
    $end            reduce using rule 12 (expression -> - expression .)
    )               reduce using rule 12 (expression -> - expression .)
    SEMICOLON       reduce using rule 12 (expression -> - expression .)

  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 21 ]
  ! *               [ shift and go to state 22 ]
  ! /               [ shift and go to state 23 ]


state 28

    (17) expression -> DEF ( . NAME , expression )

    NAME            shift and go to state 40


state 29

    (19) expression -> ALTER ( . NAME , expression )

    NAME            shift and go to state 41


state 30

    (20) expression -> REPEAT LPAREN . expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 42

state 31

    (1) statement -> PROC NAME ( . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 43

state 32

    (18) expression -> NAME ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    )               shift and go to state 44
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 33

    (13) expression -> ( expression ) .

    +               reduce using rule 13 (expression -> ( expression ) .)
    -               reduce using rule 13 (expression -> ( expression ) .)
    *               reduce using rule 13 (expression -> ( expression ) .)
    /               reduce using rule 13 (expression -> ( expression ) .)
    $end            reduce using rule 13 (expression -> ( expression ) .)
    )               reduce using rule 13 (expression -> ( expression ) .)
    SEMICOLON       reduce using rule 13 (expression -> ( expression ) .)


state 34

    (8) expression -> expression + expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    +               reduce using rule 8 (expression -> expression + expression .)
    -               reduce using rule 8 (expression -> expression + expression .)
    $end            reduce using rule 8 (expression -> expression + expression .)
    )               reduce using rule 8 (expression -> expression + expression .)
    SEMICOLON       reduce using rule 8 (expression -> expression + expression .)
    *               shift and go to state 22
    /               shift and go to state 23

  ! *               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 21 ]


state 35

    (9) expression -> expression - expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    +               reduce using rule 9 (expression -> expression - expression .)
    -               reduce using rule 9 (expression -> expression - expression .)
    $end            reduce using rule 9 (expression -> expression - expression .)
    )               reduce using rule 9 (expression -> expression - expression .)
    SEMICOLON       reduce using rule 9 (expression -> expression - expression .)
    *               shift and go to state 22
    /               shift and go to state 23

  ! *               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 9 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 21 ]


state 36

    (10) expression -> expression * expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    +               reduce using rule 10 (expression -> expression * expression .)
    -               reduce using rule 10 (expression -> expression * expression .)
    *               reduce using rule 10 (expression -> expression * expression .)
    /               reduce using rule 10 (expression -> expression * expression .)
    $end            reduce using rule 10 (expression -> expression * expression .)
    )               reduce using rule 10 (expression -> expression * expression .)
    SEMICOLON       reduce using rule 10 (expression -> expression * expression .)

  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 21 ]
  ! *               [ shift and go to state 22 ]
  ! /               [ shift and go to state 23 ]


state 37

    (11) expression -> expression / expression .
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    +               reduce using rule 11 (expression -> expression / expression .)
    -               reduce using rule 11 (expression -> expression / expression .)
    *               reduce using rule 11 (expression -> expression / expression .)
    /               reduce using rule 11 (expression -> expression / expression .)
    $end            reduce using rule 11 (expression -> expression / expression .)
    )               reduce using rule 11 (expression -> expression / expression .)
    SEMICOLON       reduce using rule 11 (expression -> expression / expression .)

  ! +               [ shift and go to state 20 ]
  ! -               [ shift and go to state 21 ]
  ! *               [ shift and go to state 22 ]
  ! /               [ shift and go to state 23 ]


state 38

    (6) statement -> ALEATORIO LPAREN RPAREN .

    $end            reduce using rule 6 (statement -> ALEATORIO LPAREN RPAREN .)


state 39

    (7) statement -> MOVER LPAREN MOVIMIENTO . RPAREN

    RPAREN          shift and go to state 45


state 40

    (17) expression -> DEF ( NAME . , expression )

    ,               shift and go to state 46


state 41

    (19) expression -> ALTER ( NAME . , expression )

    ,               shift and go to state 47


state 42

    (20) expression -> REPEAT LPAREN expression . SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    SEMICOLON       shift and go to state 48
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 43

    (1) statement -> PROC NAME ( expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    )               shift and go to state 49
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 44

    (18) expression -> NAME ( expression ) .

    +               reduce using rule 18 (expression -> NAME ( expression ) .)
    -               reduce using rule 18 (expression -> NAME ( expression ) .)
    *               reduce using rule 18 (expression -> NAME ( expression ) .)
    /               reduce using rule 18 (expression -> NAME ( expression ) .)
    $end            reduce using rule 18 (expression -> NAME ( expression ) .)
    )               reduce using rule 18 (expression -> NAME ( expression ) .)
    SEMICOLON       reduce using rule 18 (expression -> NAME ( expression ) .)


state 45

    (7) statement -> MOVER LPAREN MOVIMIENTO RPAREN .

    $end            reduce using rule 7 (statement -> MOVER LPAREN MOVIMIENTO RPAREN .)


state 46

    (17) expression -> DEF ( NAME , . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 50

state 47

    (19) expression -> ALTER ( NAME , . expression )
    (8) expression -> . expression + expression
    (9) expression -> . expression - expression
    (10) expression -> . expression * expression
    (11) expression -> . expression / expression
    (12) expression -> . - expression
    (13) expression -> . ( expression )
    (14) expression -> . INTEGER
    (15) expression -> . BOOL
    (16) expression -> . NAME
    (17) expression -> . DEF ( NAME , expression )
    (18) expression -> . NAME ( expression )
    (19) expression -> . ALTER ( NAME , expression )
    (20) expression -> . REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON

    -               shift and go to state 11
    (               shift and go to state 4
    INTEGER         shift and go to state 12
    BOOL            shift and go to state 13
    NAME            shift and go to state 3
    DEF             shift and go to state 14
    ALTER           shift and go to state 15
    REPEAT          shift and go to state 16

    expression                     shift and go to state 51

state 48

    (20) expression -> REPEAT LPAREN expression SEMICOLON . BREAK SEMICOLON RPAREN SEMICOLON

    BREAK           shift and go to state 52


state 49

    (1) statement -> PROC NAME ( expression ) .

    $end            reduce using rule 1 (statement -> PROC NAME ( expression ) .)


state 50

    (17) expression -> DEF ( NAME , expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    )               shift and go to state 53
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 51

    (19) expression -> ALTER ( NAME , expression . )
    (8) expression -> expression . + expression
    (9) expression -> expression . - expression
    (10) expression -> expression . * expression
    (11) expression -> expression . / expression

    )               shift and go to state 54
    +               shift and go to state 20
    -               shift and go to state 21
    *               shift and go to state 22
    /               shift and go to state 23


state 52

    (20) expression -> REPEAT LPAREN expression SEMICOLON BREAK . SEMICOLON RPAREN SEMICOLON

    SEMICOLON       shift and go to state 55


state 53

    (17) expression -> DEF ( NAME , expression ) .

    +               reduce using rule 17 (expression -> DEF ( NAME , expression ) .)
    -               reduce using rule 17 (expression -> DEF ( NAME , expression ) .)
    *               reduce using rule 17 (expression -> DEF ( NAME , expression ) .)
    /               reduce using rule 17 (expression -> DEF ( NAME , expression ) .)
    $end            reduce using rule 17 (expression -> DEF ( NAME , expression ) .)
    )               reduce using rule 17 (expression -> DEF ( NAME , expression ) .)
    SEMICOLON       reduce using rule 17 (expression -> DEF ( NAME , expression ) .)


state 54

    (19) expression -> ALTER ( NAME , expression ) .

    +               reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)
    -               reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)
    *               reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)
    /               reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)
    $end            reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)
    )               reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)
    SEMICOLON       reduce using rule 19 (expression -> ALTER ( NAME , expression ) .)


state 55

    (20) expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON . RPAREN SEMICOLON

    RPAREN          shift and go to state 56


state 56

    (20) expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 57


state 57

    (20) expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .

    +               reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)
    -               reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)
    *               reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)
    /               reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)
    $end            reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)
    )               reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 20 (expression -> REPEAT LPAREN expression SEMICOLON BREAK SEMICOLON RPAREN SEMICOLON .)

